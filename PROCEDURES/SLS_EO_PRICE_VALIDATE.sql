--------------------------------------------------------
--  DDL for Procedure SLS_EO_PRICE_VALIDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "SLS"."SLS_EO_PRICE_VALIDATE" 
AS
    CURSOR C1 IS
      SELECT A.* FROM SLS.APP$GLBL$UPL$EO$PRICE A;

    FLG_ORG    NUMBER := 0;
    HO_FLG_ORG NUMBER := 0;
    FLG_ITM    NUMBER := 0;
    FLG_BS_PRC NUMBER := 0;
    FLG_MRP    VARCHAR2(1) := 'N';

BEGIN

  ------REMOVING SPACES

  UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET ITM_ID           = LTRIM(RTRIM(REPLACE(ITM_ID,''''))),
        ITM_DESC         = UPPER(LTRIM(RTRIM(ITM_DESC))),
        ORG              = UPPER(LTRIM(RTRIM(ORG))),
        HO_ORG           = UPPER(LTRIM(RTRIM(HO_ORG))),
        BASE_PRICE       = LTRIM(RTRIM(BASE_PRICE)),
        MIN_PRICE        = LTRIM(RTRIM(MIN_PRICE)),
        MRP_TYP          = UPPER(LTRIM(RTRIM(MRP_TYP))),
        MRP_RATE         = LTRIM(RTRIM(MRP_RATE)),
        MRP_ADD_SUB      = UPPER(LTRIM(RTRIM(MRP_ADD_SUB))),
        TOT_MRP_RATE     = LTRIM(RTRIM(TOT_MRP_RATE)),
        MRP_PRICE        = LTRIM(RTRIM(MRP_PRICE)),
        ADD_MRP_TYP      = UPPER(LTRIM(RTRIM(ADD_MRP_TYP))),
        ADD_MRP_RATE     = LTRIM(RTRIM(ADD_MRP_RATE)),
        ADD_MRP_ADD_SUB  = UPPER(LTRIM(RTRIM(ADD_MRP_ADD_SUB))),
        ADD_TOT_MRP_RATE = LTRIM(RTRIM(ADD_TOT_MRP_RATE)),
        ADD_MRP_PRICE    = LTRIM(RTRIM(ADD_MRP_PRICE)),
        EFFECTIVE_DT     = LTRIM(RTRIM(EFFECTIVE_DT)),
        EXPIRY_DT        = LTRIM(RTRIM(EXPIRY_DT)),
        ITM_UOM          = UPPER(LTRIM(RTRIM(ITM_UOM)));

   -------------UPDATING COMMPANY CODE

  UPDATE SLS.APP$GLBL$UPL$EO$PRICE A
    SET A.ORG = NVL((SELECT B.ORG_ID FROM APP.ORG B WHERE UPPER(B.ORG_DESC) = UPPER(A.ORG)),A.ORG);

  UPDATE SLS.APP$GLBL$UPL$EO$PRICE A
   SET A.HO_ORG = NVL((SELECT B.ORG_ID FROM APP.ORG B WHERE UPPER(B.ORG_DESC) = UPPER(A.HO_ORG)),A.HO_ORG);

  UPDATE  SLS.APP$GLBL$UPL$EO$PRICE A
  SET A.ITM_UOM = NVL((SELECT B.UOM_ID FROM APP.APP$UOM$CONV$STD B
                        WHERE UPPER(LTRIM(RTRIM(UOM_DESC,' '),' ')) = UPPER(A.ITM_UOM)),NULL);

      BEGIN
         SELECT COUNT(*) INTO FLG_ORG
            FROM SLS.APP$GLBL$UPL$EO$PRICE
         WHERE NVL(ORG,'~') NOT IN (SELECT ORG_ID FROM APP.ORG);

      EXCEPTION
        WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20011,'ERROR IN FETCHING ORG ID' ||SQLCODE||SQLERRM);

      END;

      IF NVL(FLG_ORG,0) > 0 THEN
        RAISE_APPLICATION_ERROR(-20011,'CHECK ORGANIZATION NAME' ||SQLCODE||SQLERRM);

      END IF;


     BEGIN
       SELECT COUNT(*) INTO HO_FLG_ORG
          FROM SLS.APP$GLBL$UPL$EO$PRICE
       WHERE NVL(HO_ORG,'~') NOT IN (SELECT ORG_ID FROM APP.ORG WHERE ORG_TYPE = '51');

     EXCEPTION
      WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20011,'ERROR IN FETCHING HEAD OFFICE ID' ||SQLCODE||SQLERRM);

     END;

     IF NVL(HO_FLG_ORG,0) > 0 THEN
      RAISE_APPLICATION_ERROR(-20011,'CHECK HEAD OFFICE NAME' ||SQLCODE||SQLERRM);
     END IF;

     BEGIN
         SELECT COUNT(*) INTO FLG_ITM
            FROM SLS.APP$GLBL$UPL$EO$PRICE
         WHERE ITM_ID IS NULL;

      EXCEPTION
        WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20011,'ERROR IN FETCHING ITEM ID' ||SQLCODE||SQLERRM);

      END;

      IF NVL(FLG_ITM,0) > 0 THEN
        RAISE_APPLICATION_ERROR(-20011,' ITEM ID CAN NOT BE BLANK ' ||SQLCODE||SQLERRM);

      END IF;

     ---------VALIDATE RECORDS

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'ORGANISATION NAME CAN NOT BE BLANK;'
    WHERE ORG IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'HEAD OFFICE NAME CAN NOT BE BLANK;'
    WHERE HO_ORG IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'BASE_PRICE CAN NOT BE BLANK;'
    WHERE BASE_PRICE IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'MINIMUM PRICE CAN NOT BE BLANK;'
    WHERE MIN_PRICE IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'Add-on Type CAN NOT BE BLANK;'
    WHERE MRP_TYP IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'Add-on Value CAN NOT BE BLANK;'
    WHERE MRP_RATE IS NULL;

     UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'Add-on Add/Sub CAN NOT BE BLANK;'
    WHERE MRP_ADD_SUB IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'MRP CAN NOT BE BLANK;'
    WHERE MRP_PRICE IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'EFFECTIVE DATE CAN NOT BE BLANK;'
    WHERE EFFECTIVE_DT IS NULL;

    UPDATE SLS.APP$GLBL$UPL$EO$PRICE
    SET PSFL_STATUS = 'N',
           FL_REM = 'ITEM UOM CAN NOT BE BLANK;'
    WHERE ITM_UOM IS NULL;

    ---------------VALIDATING DUPLICATE ITEM ID

    FLG_ITM := 0;

    FOR I IN C1 LOOP

          SELECT COUNT(*) INTO FLG_ITM
            FROM SLS.SLS$EO$PRICE A
          WHERE ITM_ID = I.ITM_ID;

          IF FLG_ITM > 0 THEN
              UPDATE SLS.APP$GLBL$UPL$EO$PRICE
              SET PSFL_STATUS = 'N',
                  FL_REM = ' ITEM ALREADY EXISTS IN PRICE SETUP;'
              WHERE ITM_ID = I.ITM_ID;
          END IF;

          FLG_ITM := 0;

          SELECT COUNT(*) INTO FLG_ITM
            FROM APP.APP$ITM$PRF A
          WHERE A.ITM_ID = I.ITM_ID;

          IF NVL(FLG_ITM,0) = 0 THEN
              UPDATE SLS.APP$GLBL$UPL$EO$PRICE
              SET PSFL_STATUS = 'N',
                  FL_REM = 'ITEM DOES NOT EXISTS IN SYSTEM;'
              WHERE ITM_ID = I.ITM_ID;
          END IF;

          FLG_ITM := 0;

          SELECT COUNT(*) INTO FLG_ITM
            FROM SLS.APP$GLBL$UPL$EO$PRICE
          WHERE ITM_ID = I.ITM_ID;

          IF FLG_ITM > 1 THEN
              UPDATE SLS.APP$GLBL$UPL$EO$PRICE
              SET PSFL_STATUS = 'N',
                     FL_REM = 'DUPLICATE ITEM IN LIST;'
              WHERE ITM_ID = I.ITM_ID;
          END IF;

          SELECT MRP_TYP INTO FLG_MRP
            FROM SLS.APP$GLBL$UPL$EO$PRICE
          WHERE ITM_ID = I.ITM_ID AND ROWNUM < 2;

          IF FLG_MRP NOT IN ('P' , 'A') THEN
              UPDATE SLS.APP$GLBL$UPL$EO$PRICE
              SET PSFL_STATUS = 'N',
                     FL_REM = 'ADD-ON TYPE CAN BE P OR A ONLY;'
              WHERE ITM_ID = I.ITM_ID;
          END IF;

          FLG_MRP := 'N';

          SELECT MRP_ADD_SUB INTO FLG_MRP
            FROM SLS.APP$GLBL$UPL$EO$PRICE
          WHERE ITM_ID = I.ITM_ID AND ROWNUM < 2;

          IF FLG_MRP NOT IN ('A' , 'S') THEN
              UPDATE SLS.APP$GLBL$UPL$EO$PRICE
              SET PSFL_STATUS = 'N',
                     FL_REM = 'ADD-ON ADD/SUB CAN BE A OR S ONLY;'
              WHERE ITM_ID = I.ITM_ID;
          END IF;

          FLG_MRP := 'N';

          --VALIDATIONG ADDITIONAL VALUE
          IF NVL(I.ADD_MRP_TYP,'~') <> '~' THEN
              IF I.ADD_MRP_TYP NOT IN ('P','A') THEN
                  UPDATE SLS.APP$GLBL$UPL$EO$PRICE
                  SET PSFL_STATUS = 'N',
                         FL_REM = 'ADDITIONAL ADD-ON TYPE CAN BE P OR A ONLY;'
                  WHERE ITM_ID = I.ITM_ID;
              END IF;

              IF I.ADD_MRP_RATE IS NULL THEN
                  UPDATE SLS.APP$GLBL$UPL$EO$PRICE
                  SET PSFL_STATUS = 'N',
                      FL_REM = 'ADDED ADD-ON VALUE CAN NOT BE BLANK;'
                  WHERE ITM_ID = I.ITM_ID;
              END IF;

              IF I.ADD_MRP_ADD_SUB NOT IN ('A','S') THEN
                 UPDATE SLS.APP$GLBL$UPL$EO$PRICE
                  SET PSFL_STATUS = 'N',
                      FL_REM = 'ADD_ON_ADD/SUB CAN BE A OR S ONLY;'
                  WHERE ITM_ID = I.ITM_ID;
              END IF;

              IF I.ADD_MRP_PRICE IS NULL THEN
                  UPDATE SLS.APP$GLBL$UPL$EO$PRICE
                  SET PSFL_STATUS = 'N',
                      FL_REM = 'ADD_MRP_PRICE CAN NOT BE BLANK;'
                  WHERE ITM_ID = I.ITM_ID;
              END IF;
          END IF;

    END LOOP;


COMMIT;
END SLS_EO_PRICE_VALIDATE;

/

  GRANT EXECUTE ON "SLS"."SLS_EO_PRICE_VALIDATE" TO PUBLIC;
  GRANT EXECUTE ON "SLS"."SLS_EO_PRICE_VALIDATE" TO "APP";
  GRANT DEBUG ON "SLS"."SLS_EO_PRICE_VALIDATE" TO "APP";
